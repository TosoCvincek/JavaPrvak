/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bazar;

import elektronika.ElektronickyPristroj;
import elektronika.Elektronika;
import elektronika.Mobil;
import elektronika.Pocitac;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import naKolesach.Auto;
import naKolesach.Autobus;
import naKolesach.Kamion;
import naKolesach.Motorka;
import naKolesach.Vozidlo;
import zahradneMasiny.Kosacka;
import zahradneMasiny.Krovinorez;
import zahradneMasiny.MotorovaPila;
import zahradneMasiny.Stroj;

/**
 *
 * @author Tomáš
 */
public class NakupGrafika extends javax.swing.JFrame {
    private Inzerat databaza;
    private ArrayList <INaPredaj> pomocny;
    private static NakupGrafika instancia = null;
    /**
     * Creates new form NakupGrafika
     */
    
    public static NakupGrafika getInstanceNakupGrafika (Inzerat inz) {
        if (instancia == null) {
            instancia = new NakupGrafika(inz);
            return instancia;
        } else {
            return instancia;
        }
    }
    private NakupGrafika(Inzerat inz) {
        this.instancia = this;
        this.initComponents();
        this.databaza = inz;
        this.pomocny = new ArrayList<INaPredaj>();
        this.volbaCB.setVisible(false);
        this.L00.setVisible(false);
        this.L10.setVisible(false);
        this.L20.setVisible(false);
        this.L30.setVisible(false);
        this.L40.setVisible(false);
        this.L50.setVisible(false);
        this.L03.setVisible(false);
        this.L11.setVisible(false);
        this.L21.setVisible(false);
        this.L01.setVisible(false);
        this.TF00.setVisible(false);
        this.TF10.setVisible(false);
        this.TF20.setVisible(false);
        this.TF30.setVisible(false);
        this.TF40.setVisible(false);
        this.TF50.setVisible(false);
        this.TF10.setVisible(false);
        this.TF11.setVisible(false);
        this.TF21.setVisible(false);
        this.TF30.setVisible(false);
        this.TF03.setVisible(false);
        this.TF01.setVisible(false);        
    }
    /**
    *Nastaví vsetky komponenty na invisible
    */
    public void setInvisible() {
        this.L00.setVisible(false);
        this.L10.setVisible(false);
        this.L20.setVisible(false);
        this.L30.setVisible(false);
        this.L40.setVisible(false);
        this.L50.setVisible(false);
        this.L03.setVisible(false);
        this.L11.setVisible(false);
        this.L21.setVisible(false);
        this.L01.setVisible(false);
        this.TF00.setVisible(false);
        this.TF10.setVisible(false);
        this.TF20.setVisible(false);
        this.TF30.setVisible(false);
        this.TF40.setVisible(false);
        this.TF50.setVisible(false);
        this.TF10.setVisible(false);
        this.TF11.setVisible(false);
        this.TF21.setVisible(false);
        this.TF30.setVisible(false);
        this.TF03.setVisible(false);
        this.TF01.setVisible(false);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        hladatB = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        rozdelenieCB = new javax.swing.JComboBox<>();
        volbaLabel = new javax.swing.JLabel();
        volbaCB = new javax.swing.JComboBox<>();
        L00 = new javax.swing.JLabel();
        L10 = new javax.swing.JLabel();
        L20 = new javax.swing.JLabel();
        L30 = new javax.swing.JLabel();
        L40 = new javax.swing.JLabel();
        L50 = new javax.swing.JLabel();
        L03 = new javax.swing.JLabel();
        TF00 = new javax.swing.JTextField();
        TF20 = new javax.swing.JTextField();
        TF10 = new javax.swing.JTextField();
        TF30 = new javax.swing.JTextField();
        TF40 = new javax.swing.JTextField();
        TF50 = new javax.swing.JTextField();
        TF03 = new javax.swing.JTextField();
        L01 = new javax.swing.JLabel();
        L11 = new javax.swing.JLabel();
        L21 = new javax.swing.JLabel();
        TF01 = new javax.swing.JTextField();
        TF11 = new javax.swing.JTextField();
        TF21 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Vyberte z ponuky to, čo máte záujem kúpiť. ");

        hladatB.setText("Hľadať");
        hladatB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hladatBActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Zvoľte, o čo máte záujem");

        rozdelenieCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vozidlá", "Záhradné stroje", "Elektronika" }));
        rozdelenieCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rozdelenieCBActionPerformed(evt);
            }
        });

        volbaLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        volbaCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volbaCBActionPerformed(evt);
            }
        });

        L00.setText("Značka");

        L10.setText("Model");

        L20.setText("Rok výroby");

        L30.setText("Výkon");

        L40.setText("Príkon");

        L50.setText("Najazdené km");

        L03.setText("Max. cena");

        TF00.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF00ActionPerformed(evt);
            }
        });

        TF10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF10ActionPerformed(evt);
            }
        });

        TF03.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF03ActionPerformed(evt);
            }
        });

        L01.setText("jLabel2");

        L11.setText("jLabel3");

        L21.setText("jLabel4");

        TF01.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF01ActionPerformed(evt);
            }
        });

        TF21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF21ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(rozdelenieCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(578, 578, 578))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(volbaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(volbaCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(L20, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(L10, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(L30, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(L40, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(L50, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(L00, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(92, 92, 92)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TF00)
                            .addComponent(TF20, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TF30)
                            .addComponent(TF50)
                            .addComponent(TF40, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TF10))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addGap(263, 263, 263)
                                .addComponent(hladatB, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(219, 219, 219))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(L01)
                                        .addComponent(L21)
                                        .addComponent(L11))
                                    .addComponent(L03))
                                .addGap(92, 92, 92)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(TF03, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                    .addComponent(TF21, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TF11, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TF01, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rozdelenieCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(volbaCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(volbaLabel))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L00, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TF00, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L01)
                    .addComponent(TF01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L10)
                    .addComponent(TF10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L11)
                    .addComponent(TF11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L20)
                    .addComponent(TF20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L21)
                    .addComponent(TF21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L30)
                    .addComponent(TF30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L40)
                    .addComponent(TF40, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L03, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TF03, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TF50, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L50))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hladatB)
                    .addComponent(jLabel5))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int reply = JOptionPane.showConfirmDialog(null, "Naozaj chceš skončiť, tvoje dáta sa stratia", "Koniec", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_formWindowClosing
    /**
     * na zaklade výberu z combo boxu zobrazí prislusne lably a text fieldy
    */
    private void volbaCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volbaCBActionPerformed
        // TODO add your handling code here:
        if (this.rozdelenieCB.getSelectedItem().equals("Vozidlá")) {
            this.setInvisible();
            this.L00.setVisible(true);
            this.L00.setText("Značka");
            this.TF00.setVisible(true);
            this.L10.setVisible(true);
            this.L10.setText("Model");
            this.TF10.setVisible(true);
            this.L20.setVisible(true);
            this.L20.setText("Rok výroby");
            this.TF20.setVisible(true);
            this.L30.setVisible(true);
            this.L30.setText("Min. výkon(kW)");
            this.TF30.setVisible(true);
            this.L40.setVisible(true);
            this.L40.setText("Najazdené km");
            this.TF40.setVisible(true);
            this.L03.setVisible(true);
            this.L03.setText("Max. cena (€)");
            this.TF03.setVisible(true);
            if (this.volbaCB.getSelectedItem() != null) {
                if (this.volbaCB.getSelectedItem().equals("Auto")) {
                    this.L01.setVisible(true);
                    this.L01.setText("Karoséria");
                    this.TF01.setVisible(true);
                } else {
                    this.L01.setVisible(false);
                    this.TF01.setVisible(false);
                }  
            }
        } else if (this.rozdelenieCB.getSelectedItem().equals("Záhradné stroje")) {
            this.setInvisible();
            this.L00.setVisible(true);
            this.L00.setText("Značka");
            this.TF00.setVisible(true);
            this.L10.setVisible(true);
            this.L10.setText("Rok výroby");
            this.TF10.setVisible(true);
            this.L30.setVisible(true);
            this.L30.setText("Min. príkon(kW)");
            this.TF30.setVisible(true);
            this.L03.setVisible(true);
            this.L03.setText("Max. cena (€)");
            this.TF03.setVisible(true);
        } else if (this.rozdelenieCB.getSelectedItem().equals("Elektronika")) {
            this.setInvisible();
            this.L00.setVisible(true);
            this.L00.setText("Značka");
            this.TF00.setVisible(true);
            this.L10.setVisible(true);
            this.L10.setText("Rok výroby");
            this.TF10.setVisible(true);
            this.L03.setVisible(true);
            this.L03.setText("Max. cena (€)");
            this.TF03.setVisible(true);
            if (this.volbaCB.getSelectedItem() != null) {
                if (this.volbaCB.getSelectedItem().equals("Počítač") || this.volbaCB.getSelectedItem().equals("Mobil")) {
                    this.L40.setVisible(true);
                    this.L40.setText("F. procesora (MHz)");
                    this.TF40.setVisible(true);
                    this.L01.setVisible(true);
                    this.L01.setText("RAM (GB)");
                    this.TF01.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_volbaCBActionPerformed
    /**
     * zobrazi prislusny combo box na zaklade vyberu z nadradeneho combo boxu
     * @param  
     */
    private void rozdelenieCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rozdelenieCBActionPerformed
        // TODO add your handling code here:
        if (this.rozdelenieCB.getSelectedIndex() == 0) {
            this.volbaLabel.setText("Zvoľte typ vozidla");
            this.volbaCB.removeAllItems();
            this.volbaCB.setVisible(true);
            this.volbaCB.insertItemAt("Auto", 0);
            this.volbaCB.insertItemAt("Motorka", 1);
            this.volbaCB.insertItemAt("Kamión", 2);
            this.volbaCB.insertItemAt("Autobus", 3);
        } else if (this.rozdelenieCB.getSelectedIndex() == 1) {
            this.volbaLabel.setText("Zvoľte typ mašiny");
            this.volbaCB.removeAllItems();
            this.volbaCB.setVisible(true);
            this.volbaCB.insertItemAt("Kosačka", 0);
            this.volbaCB.insertItemAt("Krovinorez", 1);
            this.volbaCB.insertItemAt("Motorová Píla", 2);
        } else if (this.rozdelenieCB.getSelectedIndex() == 2) {
            this.volbaLabel.setText("Zvoľte typ elektorniky");
            this.volbaCB.removeAllItems();
            this.volbaCB.setVisible(true);
            this.volbaCB.insertItemAt("Počítač", 0);
            this.volbaCB.insertItemAt("Mobil", 1);
            this.volbaCB.insertItemAt("Iné", 2);
        } else {
            this.volbaLabel.setText("");
            this.volbaCB.removeAllItems();
            this.volbaCB.setVisible(false);
        }
    }//GEN-LAST:event_rozdelenieCBActionPerformed

    private void TF03ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF03ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF03ActionPerformed

    private void TF00ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF00ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF00ActionPerformed

    private void TF01ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF01ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF01ActionPerformed

    private void TF21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF21ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF21ActionPerformed
    /**
     * Po stlaceni tlacidla sa získajú vsetky informácie z textfieldov spresnujuce hladanie
     * V prípade chyby sa vyhadzujú rôzne druhy výnimiek
     * Nakoniec zo zozbrieranymi datami zavolá pomocnú metódu, ktorej parametre budu spresnovacie udaje
     * Ak zozbierane parametre nevyhovuju ziadnemu inzeratu, vyhodi vlstanu vynimku ZleParametreException
    */
    private void hladatBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hladatBActionPerformed
        // TODO add your handling code here:
        int moze = 0;
        String znacka = "";
        String model = "";
        int rokVyroby = 0;
        int vykon = 0;
        int najazdeneKm = Integer.MAX_VALUE;
        int cena = Integer.MAX_VALUE;
        String karoseria = ""; 
        int frekvencia = 0;
        double ram = 0;
        if (this.rozdelenieCB.getSelectedItem().equals("Vozidlá")) {
            try {
                if (this.volbaCB.getSelectedItem().equals("Auto")) {
                    znacka = "";
                    model = "";
                    rokVyroby = 0;
                    vykon = 0;
                    najazdeneKm = Integer.MAX_VALUE;
                    cena = Integer.MAX_VALUE;
                    karoseria = ""; 
                    frekvencia = 0;
                    ram = 0;
                    znacka = this.TF00.getText();
                    model = this.TF10.getText();
                    try {
                        if (this.TF20.getText().isEmpty()) {
                            rokVyroby = 0;
                        } else {
                            if (Integer.parseInt(this.TF20.getText()) > 0) {
                                rokVyroby = Integer.parseInt(this.TF20.getText());
                            } else {
                                rokVyroby = Integer.parseInt("zle");
                                moze++;
                            }
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Zle zadaný rok výroby");
                        moze++;
                    }
                    try {
                        if (this.TF40.getText().isEmpty()) {
                            najazdeneKm = Integer.MAX_VALUE;;
                        } else {
                            if (Integer.parseInt(this.TF40.getText()) > 0) { 
                                najazdeneKm = Integer.parseInt(this.TF40.getText());
                            } else {
                                najazdeneKm = Integer.parseInt("zle");
                            }
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Zle zadané najazdené kilometre");
                        moze++;
                    }
                    try {
                        if (this.TF30.getText().isEmpty()) {
                            vykon = 0;
                        } else {
                            if (Integer.parseInt(this.TF30.getText()) > 0) {
                                vykon = Integer.parseInt(this.TF30.getText());
                            } else {
                                vykon = Integer.parseInt("zle");     
                            }
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Zle zadaný výkon");
                        moze++;
                    }
                    try {
                        if (this.TF03.getText().isEmpty()) {
                            cena = Integer.MAX_VALUE;;
                        } else {
                            if (Integer.parseInt(this.TF03.getText()) > 0) {
                                cena = Integer.parseInt(this.TF03.getText());
                            } else {
                                cena = Integer.parseInt("zle");
                            }
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Zle zadaná cena");
                        moze++;
                    }
                    karoseria = this.TF01.getText();
                } else {
                    znacka = "";
                    model = "";
                    rokVyroby = 0;
                    vykon = 0;
                    najazdeneKm = Integer.MAX_VALUE;
                    cena = Integer.MAX_VALUE;
                    karoseria = "";
                    frekvencia = 0;
                    ram = 0;
                    znacka = this.TF00.getText();
                    model = this.TF10.getText();
                    try {
                        if (this.TF20.getText().isEmpty()) {
                            rokVyroby = 0;
                        } else {
                            if (Integer.parseInt(this.TF20.getText()) > 0) {
                                rokVyroby = Integer.parseInt(this.TF20.getText());
                            } else {
                                rokVyroby = Integer.parseInt("zle");
                            }
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Zle zadaný rok výroby");
                        moze++;
                    }
                    try {
                        if (this.TF40.getText().isEmpty()) {
                            najazdeneKm = Integer.MAX_VALUE;;
                        } else {
                            if (Integer.parseInt(this.TF40.getText()) > 0) { 
                                najazdeneKm = Integer.parseInt(this.TF40.getText());
                            } else {
                                najazdeneKm = Integer.parseInt("zle");
                            }
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Zle zadané najazdené kilometre");
                        moze++;
                    }
                    try {
                        if (this.TF30.getText().isEmpty()) {
                            vykon = 0;
                        } else {
                            if (Integer.parseInt(this.TF30.getText()) > 0) {
                                vykon = Integer.parseInt(this.TF30.getText());
                            } else {
                                vykon = Integer.parseInt("zle");     
                            }
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Zle zadaný výkon");
                        moze++;
                    }
                    try {
                        if (this.TF03.getText().isEmpty()) {
                            cena = Integer.MAX_VALUE;
                        } else {
                            if (Integer.parseInt(this.TF03.getText()) > 0) {
                                cena = Integer.parseInt(this.TF03.getText());
                            } else {
                                cena = Integer.parseInt("zle");
                            }
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Zle zadaná cena");
                        moze++;
                    }
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(null, "Nesprávne parametre");
                moze++;
            } 
        } else if (this.rozdelenieCB.getSelectedItem().equals("Záhradné stroje")) {
            znacka = "";
            model = "";
            rokVyroby = 0;
            vykon = 0;
            najazdeneKm = Integer.MAX_VALUE;
            cena = Integer.MAX_VALUE;
            karoseria = ""; 
            frekvencia = 0;
            ram = 0;
            znacka = this.TF00.getText();
            try {
                try {
                    if (this.TF20.getText().isEmpty()) {
                        rokVyroby = 0;
                    } else {
                        if (Integer.parseInt(this.TF20.getText()) > 0) {
                            rokVyroby = Integer.parseInt(this.TF20.getText());
                        } else {
                            rokVyroby = Integer.parseInt("zle");
                        }
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Zle zadaný rok výroby");
                    moze++;
                }
                try {
                    if (this.TF30.getText().isEmpty()) {
                        vykon = 0;
                    } else {
                        if (Integer.parseInt(this.TF30.getText()) > 0) {
                            vykon = Integer.parseInt(this.TF30.getText());
                        } else {
                            vykon = Integer.parseInt("zle");     
                        }
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Zle zadaný príkon");
                    moze++;
                }
                try {
                    if (this.TF03.getText().isEmpty()) {
                        cena = Integer.MAX_VALUE;
                    } else {
                        if (Integer.parseInt(this.TF03.getText()) > 0) {
                            cena = Integer.parseInt(this.TF03.getText());
                        } else {
                            cena = Integer.parseInt("zle");
                        }
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Zle zadaná cena");
                    moze++;
                }       
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(null, "Nesprávne parametre");
                moze++;
            }
        } else if (this.rozdelenieCB.getSelectedItem().equals("Elektronika")) {
            znacka = "";
            model = "";
            rokVyroby = 0;
            vykon = 0;
            najazdeneKm = Integer.MAX_VALUE;
            cena = Integer.MAX_VALUE;
            karoseria = ""; 
            frekvencia = 0;
            ram = 0;
            znacka = this.TF00.getText();
            try {
                try {
                    if (this.TF20.getText().isEmpty()) {
                        rokVyroby = 0;
                    } else {
                        if (Integer.parseInt(this.TF20.getText()) > 0) {
                            rokVyroby = Integer.parseInt(this.TF20.getText());
                        } else {
                            rokVyroby = Integer.parseInt("zle");
                        }
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Zle zadaný rok výroby");
                    moze++;
                }
                try {
                    if (this.TF03.getText().isEmpty()) {
                        cena = Integer.MAX_VALUE;
                    } else {
                        if (Integer.parseInt(this.TF03.getText()) > 0) {
                            cena = Integer.parseInt(this.TF03.getText());
                        } else {
                            cena = Integer.parseInt("zle");
                        }
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Zle zadaná cena");
                    moze++;
                }
                if (!this.volbaCB.getSelectedItem().equals("Iné")) {
                    try {
                        if (this.TF40.getText().isEmpty()) {
                            frekvencia = 0;
                        } else {
                            if (Integer.parseInt(this.TF40.getText()) > 0) {
                                frekvencia = Integer.parseInt(this.TF40.getText());
                            } else {
                                frekvencia = Integer.parseInt("zle");
                            }
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Zle zadaná frekvencia");
                        moze++;
                    }
                    try {
                        if (this.TF01.getText().isEmpty()) {
                            ram = 0;
                        } else {
                            if (Integer.parseInt(this.TF01.getText()) > 0) {
                                ram = Double.parseDouble(this.TF01.getText());
                            } else {
                                ram = Double.parseDouble("zle");
                            }
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Zle zadaná RAM");
                        moze++;
                    }
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(null, "Nesprávne parametre"); 
                moze++;
            }
        }
        this.pomocny.removeAll(this.pomocny);
        if (moze == 0) {
            ArrayList<INaPredaj> pomocna = new ArrayList<>();
            int z = 0;
            try {
                pomocna = this.vyhladaj("" + this.rozdelenieCB.getSelectedItem(), "" + this.volbaCB.getSelectedItem(), znacka, model, rokVyroby, vykon, najazdeneKm, cena, karoseria, frekvencia, ram);
            } catch (ZleParametreVyhladavaniaException ex) {
                JOptionPane.showMessageDialog(null, "Nenašli sme nič.\n" + ex.getMessage());   
                z++;
            }
            if (z == 0) {
                Pozadovane inzeraty = new Pozadovane(pomocna, this.databaza);
            }
        }
    }//GEN-LAST:event_hladatBActionPerformed
    
    /**
     * Zlozita metoda na vyhladavanie pozadovanych inzeratov
     * na zaklade parametrov metody vyhlada v databaze pozadovane inzeraty vyhovujuce podmienkam
     * Vrati arraylist s uz len vyhovujúcimi inzerátmi
     * @param typ
     * @param podtyp
     * @param znacka
     * @param model
     * @param rokVyroby
     * @param vykon
     * @param najazdeneKm
     * @param cena
     * @param karoseria
     * @param frekvencia
     * @param ram
     * @return ArrayList<INaPredaj>
     */
    private ArrayList<INaPredaj> vyhladaj(String typ, String podtyp, String znacka, String model, int rokVyroby, int vykon, int najazdeneKm, int cena, String karoseria, int frekvencia, double ram) {
        if (typ.equals("Vozidlá")) {
            if (true) {
                if (!znacka.isEmpty()) {
                    if (!model.isEmpty()) {
                        if (!karoseria.isEmpty()) {
                            for (int i = 0; i < this.databaza.dajPocet(); i++) {
                                if (this.databaza.poskytniInzerat(i) instanceof Vozidlo) {
                                    if (((Vozidlo)this.databaza.poskytniInzerat(i)).getZnacka().equals(znacka)) {
                                        if (((Vozidlo)this.databaza.poskytniInzerat(i)).getModel().equals(model)) {
                                            if (((Vozidlo)this.databaza.poskytniInzerat(i)).getKaroseria().equals(karoseria)) {
                                                if (((Vozidlo)this.databaza.poskytniInzerat(i)).getRokVyroby() > rokVyroby) {
                                                    if (((Vozidlo)this.databaza.poskytniInzerat(i)).getNajazdeneKm() < najazdeneKm) {
                                                        if (((Vozidlo)this.databaza.poskytniInzerat(i)).getVykon() > vykon) {
                                                            if (((Vozidlo)this.databaza.poskytniInzerat(i)).getCena() < cena) {
                                                                if (podtyp.equals("Auto")) {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Auto) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                } else if (podtyp.equals("Motorka")) {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Motorka) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                } else if (podtyp.equals("Kamion")) {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Kamion) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                } else {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Autobus) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            for (int i = 0; i < this.databaza.dajPocet(); i++) {
                                if (this.databaza.poskytniInzerat(i) instanceof Vozidlo) {
                                    if (((Vozidlo)this.databaza.poskytniInzerat(i)).getZnacka().equals(znacka)) {
                                        if (((Vozidlo)this.databaza.poskytniInzerat(i)).getModel().equals(model)) {
                                            if (((Vozidlo)this.databaza.poskytniInzerat(i)).getRokVyroby() > rokVyroby) {
                                                if (((Vozidlo)this.databaza.poskytniInzerat(i)).getNajazdeneKm() < najazdeneKm) {
                                                    if (((Vozidlo)this.databaza.poskytniInzerat(i)).getVykon() > vykon) {
                                                        if (((Vozidlo)this.databaza.poskytniInzerat(i)).getCena() < cena) {
                                                            if (podtyp.equals("Auto")) {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Auto) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            } else if (podtyp.equals("Motorka")) {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Motorka) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            } else if (podtyp.equals("Kamion")) {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Kamion) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            } else {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Autobus) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if (!karoseria.isEmpty()) {
                            for (int i = 0; i < this.databaza.dajPocet(); i++) {
                                if (this.databaza.poskytniInzerat(i) instanceof Vozidlo) {
                                    if (((Vozidlo)this.databaza.poskytniInzerat(i)).getZnacka().equals(znacka)) {
                                        if (true) {
                                            if (((Vozidlo)this.databaza.poskytniInzerat(i)).getKaroseria().equals(karoseria)) {
                                                if (((Vozidlo)this.databaza.poskytniInzerat(i)).getRokVyroby() > rokVyroby) {
                                                    if (((Vozidlo)this.databaza.poskytniInzerat(i)).getNajazdeneKm() < najazdeneKm) {
                                                        if (((Vozidlo)this.databaza.poskytniInzerat(i)).getVykon() > vykon) {
                                                            if (((Vozidlo)this.databaza.poskytniInzerat(i)).getCena() < cena) {
                                                                if (podtyp.equals("Auto")) {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Auto) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                } else if (podtyp.equals("Motorka")) {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Motorka) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                } else if (podtyp.equals("Kamion")) {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Kamion) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                } else {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Autobus) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            for (int i = 0; i < this.databaza.dajPocet(); i++) {
                                if (this.databaza.poskytniInzerat(i) instanceof Vozidlo) {
                                    if (((Vozidlo)this.databaza.poskytniInzerat(i)).getZnacka().equals(znacka)) {
                                        if (true) {
                                            if (((Vozidlo)this.databaza.poskytniInzerat(i)).getRokVyroby() > rokVyroby) {
                                                if (((Vozidlo)this.databaza.poskytniInzerat(i)).getNajazdeneKm() < najazdeneKm) {
                                                    if (((Vozidlo)this.databaza.poskytniInzerat(i)).getVykon() > vykon) {
                                                        if (((Vozidlo)this.databaza.poskytniInzerat(i)).getCena() < cena) {
                                                            if (podtyp.equals("Auto")) {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Auto) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            } else if (podtyp.equals("Motorka")) {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Motorka) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            } else if (podtyp.equals("Kamion")) {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Kamion) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            } else {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Autobus) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (!model.isEmpty()) {
                        if (!karoseria.isEmpty()) {
                            for (int i = 0; i < this.databaza.dajPocet(); i++) {
                                if (this.databaza.poskytniInzerat(i) instanceof Vozidlo) {
                                    if (true) {
                                        if (((Vozidlo)this.databaza.poskytniInzerat(i)).getModel().equals(model)) {
                                            if (((Vozidlo)this.databaza.poskytniInzerat(i)).getKaroseria().equals(karoseria)) {
                                                if (((Vozidlo)this.databaza.poskytniInzerat(i)).getRokVyroby() > rokVyroby) {
                                                    if (((Vozidlo)this.databaza.poskytniInzerat(i)).getNajazdeneKm() < najazdeneKm) {
                                                        if (((Vozidlo)this.databaza.poskytniInzerat(i)).getVykon() > vykon) {
                                                            if (((Vozidlo)this.databaza.poskytniInzerat(i)).getCena() < cena) {
                                                                if (podtyp.equals("Auto")) {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Auto) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                } else if (podtyp.equals("Motorka")) {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Motorka) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                } else if (podtyp.equals("Kamion")) {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Kamion) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                } else {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Autobus) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            for (int i = 0; i < this.databaza.dajPocet(); i++) {
                                if (this.databaza.poskytniInzerat(i) instanceof Vozidlo) {
                                    if (true) {
                                        if (((Vozidlo)this.databaza.poskytniInzerat(i)).getModel().equals(model)) {
                                            if (((Vozidlo)this.databaza.poskytniInzerat(i)).getRokVyroby() > rokVyroby) {
                                                if (((Vozidlo)this.databaza.poskytniInzerat(i)).getNajazdeneKm() < najazdeneKm) {
                                                    if (((Vozidlo)this.databaza.poskytniInzerat(i)).getVykon() > vykon) {
                                                        if (((Vozidlo)this.databaza.poskytniInzerat(i)).getCena() < cena) {
                                                            if (podtyp.equals("Auto")) {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Auto) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            } else if (podtyp.equals("Motorka")) {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Motorka) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            } else if (podtyp.equals("Kamion")) {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Kamion) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            } else {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Autobus) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if (!karoseria.isEmpty()) {
                            for (int i = 0; i < this.databaza.dajPocet(); i++) {
                                if (this.databaza.poskytniInzerat(i) instanceof Vozidlo) {
                                    if (true) {
                                        if (true) {
                                            if (((Vozidlo)this.databaza.poskytniInzerat(i)).getKaroseria().equals(karoseria)) {
                                                if (((Vozidlo)this.databaza.poskytniInzerat(i)).getRokVyroby() > rokVyroby) {
                                                    if (((Vozidlo)this.databaza.poskytniInzerat(i)).getNajazdeneKm() < najazdeneKm) {
                                                        if (((Vozidlo)this.databaza.poskytniInzerat(i)).getVykon() > vykon) {
                                                            if (((Vozidlo)this.databaza.poskytniInzerat(i)).getCena() < cena) {
                                                                if (podtyp.equals("Auto")) {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Auto) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                } else if (podtyp.equals("Motorka")) {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Motorka) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                } else if (podtyp.equals("Kamion")) {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Kamion) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                } else {
                                                                    if (this.databaza.poskytniInzerat(i) instanceof Autobus) {
                                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            for (int i = 0; i < this.databaza.dajPocet(); i++) {
                                if (this.databaza.poskytniInzerat(i) instanceof Vozidlo) {
                                    if (true) {
                                        if (true) {
                                            if (((Vozidlo)this.databaza.poskytniInzerat(i)).getRokVyroby() > rokVyroby) {
                                                if (((Vozidlo)this.databaza.poskytniInzerat(i)).getNajazdeneKm() < najazdeneKm) {
                                                    if (((Vozidlo)this.databaza.poskytniInzerat(i)).getVykon() > vykon) {
                                                        if (((Vozidlo)this.databaza.poskytniInzerat(i)).getCena() < cena) {
                                                            if (podtyp.equals("Auto")) {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Auto) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            } else if (podtyp.equals("Motorka")) {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Motorka) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            } else if (podtyp.equals("Kamion")) {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Kamion) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            } else {
                                                                if (this.databaza.poskytniInzerat(i) instanceof Autobus) {
                                                                    this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } 
            }
        } else if (typ.equals("Záhradné stroje")) {
            if (!znacka.isEmpty()) {
                for (int i = 0; i < this.databaza.dajPocet(); i++) {
                    if (this.databaza.poskytniInzerat(i) instanceof Stroj) {
                        if (((Stroj)this.databaza.poskytniInzerat(i)).getRokVyroby() > rokVyroby) {
                            if (((Stroj)this.databaza.poskytniInzerat(i)).getPrikonVKw() > vykon) {
                                if (((Stroj)this.databaza.poskytniInzerat(i)).getCena() < cena) {
                                    if (((Stroj)this.databaza.poskytniInzerat(i)).getZnacka().equals(znacka)) {
                                        if (podtyp.equals("Kosačka")) {
                                            if (this.databaza.poskytniInzerat(i) instanceof Kosacka) {
                                                this.pomocny.add(this.databaza.poskytniInzerat(i));
                                            }
                                        } else if (podtyp.equals("Krovinorez")) {
                                            if (this.databaza.poskytniInzerat(i) instanceof Krovinorez) {
                                                this.pomocny.add(this.databaza.poskytniInzerat(i));
                                            }
                                        } else {
                                            if (this.databaza.poskytniInzerat(i) instanceof MotorovaPila) {
                                                this.pomocny.add(this.databaza.poskytniInzerat(i));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                for (int i = 0; i < this.databaza.dajPocet(); i++) {
                    if (this.databaza.poskytniInzerat(i) instanceof Stroj) {
                        if (((Stroj)this.databaza.poskytniInzerat(i)).getRokVyroby() > rokVyroby) {
                            if (((Stroj)this.databaza.poskytniInzerat(i)).getPrikonVKw() > vykon) {
                                if (((Stroj)this.databaza.poskytniInzerat(i)).getCena() < cena) {
                                    if (true) { 
                                        if (podtyp.equals("Kosačka")) {
                                            if (this.databaza.poskytniInzerat(i) instanceof Kosacka) {
                                                this.pomocny.add(this.databaza.poskytniInzerat(i));
                                            }
                                        } else if (podtyp.equals("Krovinorez")) {
                                            if (this.databaza.poskytniInzerat(i) instanceof Krovinorez) {
                                                this.pomocny.add(this.databaza.poskytniInzerat(i));
                                            }
                                        } else {
                                            if (this.databaza.poskytniInzerat(i) instanceof MotorovaPila) {
                                                this.pomocny.add(this.databaza.poskytniInzerat(i));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else if (typ.equals("Elektronika")) {
            if (!znacka.isEmpty()) {
                for (int i = 0; i < this.databaza.dajPocet(); i++) {
                    if (this.databaza.poskytniInzerat(i) instanceof ElektronickyPristroj) {
                        if (((ElektronickyPristroj)this.databaza.poskytniInzerat(i)).getRokVyroby() > rokVyroby) {
                            if (true) {
                                if (((ElektronickyPristroj)this.databaza.poskytniInzerat(i)).getCena() < cena) {
                                    if (((ElektronickyPristroj)this.databaza.poskytniInzerat(i)).getZnacka().equals(znacka)) {
                                        if (podtyp.equals("Iné")) {
                                            if (this.databaza.poskytniInzerat(i) instanceof Elektronika) {
                                                this.pomocny.add(this.databaza.poskytniInzerat(i));
                                            }
                                        } else if (podtyp.equals("Počítač")) {
                                            if (this.databaza.poskytniInzerat(i) instanceof Pocitac) {
                                                if (this.databaza.poskytniInzerat(i) instanceof Pocitac) {
                                                    if (((Pocitac)this.databaza.poskytniInzerat(i)).getFrekvenciaProcesora() > frekvencia) {
                                                        if (((Pocitac)this.databaza.poskytniInzerat(i)).getRam() > ram) {
                                                            this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if (this.databaza.poskytniInzerat(i) instanceof Mobil) {
                                                if (((Mobil)this.databaza.poskytniInzerat(i)).getFrekvenciaProcesora() > frekvencia) {
                                                    if (((Mobil)this.databaza.poskytniInzerat(i)).getRam() > ram) {
                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                for (int i = 0; i < this.databaza.dajPocet(); i++) {
                    if (this.databaza.poskytniInzerat(i) instanceof ElektronickyPristroj) {
                        if (((ElektronickyPristroj)this.databaza.poskytniInzerat(i)).getRokVyroby() > rokVyroby) {
                            if (true) {
                                if (((ElektronickyPristroj)this.databaza.poskytniInzerat(i)).getCena() < cena) {
                                    if (true) { 
                                        if (podtyp.equals("Iné")) {
                                            if (this.databaza.poskytniInzerat(i) instanceof Elektronika) {
                                                this.pomocny.add(this.databaza.poskytniInzerat(i));
                                            }
                                        } else if (podtyp.equals("Počítač")) {
                                            if (this.databaza.poskytniInzerat(i) instanceof Pocitac) {
                                                if (((Pocitac)this.databaza.poskytniInzerat(i)).getFrekvenciaProcesora() > frekvencia) {
                                                    if (((Pocitac)this.databaza.poskytniInzerat(i)).getRam() > ram) {
                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                    }
                                                }
                                            }
                                        } else {
                                            if (this.databaza.poskytniInzerat(i) instanceof Mobil) {
                                                if (((Mobil)this.databaza.poskytniInzerat(i)).getFrekvenciaProcesora() > frekvencia) {
                                                    if (((Mobil)this.databaza.poskytniInzerat(i)).getRam() > ram) {
                                                        this.pomocny.add(this.databaza.poskytniInzerat(i));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (this.pomocny.size() == 0) {
            throw new ZleParametreVyhladavaniaException("typ: " + typ + ", podtyp: " + podtyp + ", znacka: " + znacka + ", model: " + model + ", rok vyroby: " + rokVyroby + ", vykon: " + vykon + ", najazdene km: " + najazdeneKm + ", cena: " + cena + ", karoseria: " + karoseria + ", frekvencia procesora: " + frekvencia + ", ram: " + ram);
        }
        return this.pomocny;
    }
    
    private void TF10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NakupGrafika.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NakupGrafika.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NakupGrafika.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NakupGrafika.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NakupGrafika(new Inzerat()).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel L00;
    private javax.swing.JLabel L01;
    private javax.swing.JLabel L03;
    private javax.swing.JLabel L10;
    private javax.swing.JLabel L11;
    private javax.swing.JLabel L20;
    private javax.swing.JLabel L21;
    private javax.swing.JLabel L30;
    private javax.swing.JLabel L40;
    private javax.swing.JLabel L50;
    private javax.swing.JTextField TF00;
    private javax.swing.JTextField TF01;
    private javax.swing.JTextField TF03;
    private javax.swing.JTextField TF10;
    private javax.swing.JTextField TF11;
    private javax.swing.JTextField TF20;
    private javax.swing.JTextField TF21;
    private javax.swing.JTextField TF30;
    private javax.swing.JTextField TF40;
    private javax.swing.JTextField TF50;
    private javax.swing.JButton hladatB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JComboBox<String> rozdelenieCB;
    private javax.swing.JComboBox<String> volbaCB;
    private javax.swing.JLabel volbaLabel;
    // End of variables declaration//GEN-END:variables
}
